{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\fa.svelte",
    "..\\..\\index.svelte",
    "..\\..\\index.svelte",
    "..\\..\\Sidebar.svelte",
    "..\\..\\Board.svelte",
    "..\\..\\Login.svelte",
    "..\\..\\Register.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport {\n  joinCss,\n  getStyles,\n  getTransform,\n} from './utils';\n\nlet clazz = '';\nexport { clazz as class };\nexport let id = '';\nexport let style = '';\n\nexport let icon;\n\nexport let size = '';\nexport let color = '';\n\nexport let fw = false;\nexport let pull = '';\n\nexport let scale = 1;\nexport let translateX = 0;\nexport let translateY = 0;\nexport let rotate = '';\nexport let flip = false;\n\nexport let spin = false;\nexport let pulse = false;\n\n// Duotone Icons\nexport let primaryColor = '';\nexport let secondaryColor = '';\nexport let primaryOpacity = 1;\nexport let secondaryOpacity = 0.4;\nexport let swapOpacity = false;\n\nlet i;\nlet c;\nlet s;\nlet transform;\n\n$: i = (icon && icon.icon) || [0, 0, '', [], ''];\n\n$: c = joinCss(\n  [\n    clazz,\n    'svelte-fa',\n    spin && 'spin',\n    pulse && 'pulse',\n  ],\n  ' ',\n);\n\n$: s = getStyles(style, size, pull, fw);\n\n$: transform = getTransform(scale, translateX, translateY, rotate, flip, 512);\n</script>\n\n<style>\n.spin {\n  animation: spin 2s 0s infinite linear;\n}\n\n.pulse {\n  animation: spin 1s infinite steps(8);\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n</style>\n\n{#if i[4]}\n  <svg\n    {id}\n    class={c}\n    style={s}\n    viewBox={`0 0 ${i[0]} ${i[1]}`}\n    aria-hidden=\"true\"\n    role=\"img\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g\n      transform={`translate(${i[0] / 2} ${i[1] / 2})`}\n      transform-origin={`${i[0] / 4} 0`}\n    >\n      <g {transform}>\n        {#if typeof i[4] == 'string'}\n          <path\n            d={i[4]}\n            fill={color || primaryColor || 'currentColor'}\n            transform={`translate(${i[0] / -2} ${i[1] / -2})`}\n          />\n        {:else}\n          <path\n            d={i[4][0]}\n            fill={secondaryColor || color || 'currentColor'}\n            fill-opacity={swapOpacity != false ? primaryOpacity : secondaryOpacity}\n            transform={`translate(${i[0] / -2} ${i[1] / -2})`}\n          />\n          <path\n            d={i[4][1]}\n            fill={primaryColor || color || 'currentColor'}\n            fill-opacity={swapOpacity != false ? secondaryOpacity : primaryOpacity}\n            transform={`translate(${i[0] / -2} ${i[1] / -2})`}\n          />\n        {/if}\n      </g>\n    </g>\n  </svg>\n{/if}\n",
    "<style>\n  .svlt-grid-item {\n    touch-action: none;\n    position: absolute;\n    will-change: auto;\n    backface-visibility: hidden;\n    -webkit-backface-visibility: hidden;\n  }\n\n  .svlt-grid-resizer {\n    user-select: none;\n    width: 20px;\n    height: 20px;\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    cursor: se-resize;\n  }\n  .svlt-grid-resizer::after {\n    content: \"\";\n    position: absolute;\n    right: 3px;\n    bottom: 3px;\n    width: 5px;\n    height: 5px;\n    border-right: 2px solid rgba(0, 0, 0, 0.4);\n    border-bottom: 2px solid rgba(0, 0, 0, 0.4);\n  }\n\n  .svlt-grid-active {\n    z-index: 3;\n    cursor: grabbing;\n    position: fixed;\n    opacity: 0.5;\n\n    /*No user*/\n    backface-visibility: hidden;\n    -webkit-backface-visibility: hidden;\n    -moz-backface-visibility: hidden;\n    -o-backface-visibility: hidden;\n    -ms-backface-visibility: hidden;\n    user-select: none;\n  }\n\n  .shadow-active {\n    z-index: 2;\n    transition: all 0.2s;\n  }\n\n  .svlt-grid-shadow {\n    position: absolute;\n    background: red;\n    will-change: transform;\n    background: pink;\n    backface-visibility: hidden;\n    -webkit-backface-visibility: hidden;\n  }\n</style>\n\n<div\n  draggable={false}\n  on:pointerdown={item && item.customDragger ? null : draggable && pointerdown}\n  class=\"svlt-grid-item\"\n  class:svlt-grid-active={active || (trans && rect)}\n  style=\"width: {active ? newSize.width : width}px; height:{active ? newSize.height : height}px; \n  {active ? `transform: translate(${cordDiff.x}px, ${cordDiff.y}px);top:${rect.top}px;left:${rect.left}px;` : trans ? `transform: translate(${cordDiff.x}px, ${cordDiff.y}px); position:absolute; transition: width 0.2s, height 0.2s;` : `transition: transform 0.2s, opacity 0.2s; transform: translate(${left}px, ${top}px); `} \">\n  <slot movePointerDown={pointerdown} {resizePointerDown} />\n  {#if resizable && !item.customResizer}\n    <div class=\"svlt-grid-resizer\" on:pointerdown={resizePointerDown} />\n  {/if}\n</div>\n\n{#if active || trans}\n  <div class=\"svlt-grid-shadow shadow-active\" style=\"width: {shadow.w * xPerPx - gapX * 2}px; height: {shadow.h * yPerPx - gapY * 2}px; transform: translate({shadow.x * xPerPx + gapX}px, {shadow.y * yPerPx + gapY}px); \" bind:this={shadowElement} />\n{/if}\n\n<script>\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  export let sensor;\n  export let width;\n  export let height;\n  export let left;\n  export let top;\n\n  export let resizable;\n  export let draggable;\n\n  export let id;\n  export let container;\n\n  export let xPerPx;\n  export let yPerPx;\n\n  export let gapX;\n  export let gapY;\n  export let item;\n\n  export let max;\n  export let min;\n\n  export let cols;\n\n  export let nativeContainer;\n\n  let shadowElement;\n  let shadow = {};\n\n  let active = false;\n\n  let initX, initY;\n\n  let capturePos = {\n    x: 0,\n    y: 0,\n  };\n\n  let cordDiff = { x: 0, y: 0 };\n\n  let newSize = { width, height };\n  let trans = false;\n\n  let anima;\n\n  const inActivate = () => {\n    const shadowBound = shadowElement.getBoundingClientRect();\n    const xdragBound = rect.left + cordDiff.x;\n    const ydragBound = rect.top + cordDiff.y;\n\n    cordDiff.x = shadow.x * xPerPx + gapX - (shadowBound.x - xdragBound);\n    cordDiff.y = shadow.y * yPerPx + gapY - (shadowBound.y - ydragBound);\n\n    active = false;\n    trans = true;\n\n    clearTimeout(anima);\n\n    anima = setTimeout(() => {\n      trans = false;\n    }, 100);\n\n    dispatch(\"pointerup\", {\n      id,\n    });\n  };\n\n  let repaint = (cb, isPointerUp) => {\n    dispatch(\"repaint\", {\n      id,\n      shadow,\n      isPointerUp,\n      onUpdate: cb,\n    });\n  };\n\n  // Autoscroll\n  let _scrollTop = 0;\n  let containerFrame;\n  let rect;\n  let scrollElement;\n\n  const getContainerFrame = (element) => {\n    if (element === document.documentElement || !element) {\n      const { height, top, right, bottom, left } = nativeContainer.getBoundingClientRect();\n\n      return {\n        top: Math.max(0, top),\n        bottom: Math.min(window.innerHeight, bottom),\n      };\n    }\n\n    return element.getBoundingClientRect();\n  };\n\n  const getScroller = (element) => (!element ? document.documentElement : element);\n\n  const pointerdown = ({ clientX, clientY, target }) => {\n    initX = clientX;\n    initY = clientY;\n\n    capturePos = { x: left, y: top };\n    shadow = { x: item.x, y: item.y, w: item.w, h: item.h };\n    newSize = { width, height };\n\n    containerFrame = getContainerFrame(container);\n    scrollElement = getScroller(container);\n\n    cordDiff = { x: 0, y: 0 };\n    rect = target.closest(\".svlt-grid-item\").getBoundingClientRect();\n\n    active = true;\n    trans = false;\n    _scrollTop = scrollElement.scrollTop;\n\n    window.addEventListener(\"pointermove\", pointermove);\n    window.addEventListener(\"pointerup\", pointerup);\n  };\n\n  let sign = { x: 0, y: 0 };\n  let vel = { x: 0, y: 0 };\n  let intervalId = 0;\n\n  const stopAutoscroll = () => {\n    clearInterval(intervalId);\n    intervalId = false;\n    sign = { x: 0, y: 0 };\n    vel = { x: 0, y: 0 };\n  };\n\n  const update = () => {\n    const _newScrollTop = scrollElement.scrollTop - _scrollTop;\n\n    const boundX = capturePos.x + cordDiff.x;\n    const boundY = capturePos.y + (cordDiff.y + _newScrollTop);\n\n    let gridX = Math.round(boundX / xPerPx);\n    let gridY = Math.round(boundY / yPerPx);\n\n    shadow.x = Math.max(Math.min(gridX, cols - shadow.w), 0);\n    shadow.y = Math.max(gridY, 0);\n\n    if (max.y) {\n      shadow.y = Math.min(shadow.y, max.y);\n    }\n\n    repaint();\n  };\n\n  const pointermove = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n\n    const { clientX, clientY } = event;\n    cordDiff = { x: clientX - initX, y: clientY - initY };\n\n    const Y_SENSOR = sensor;\n\n    let velocityTop = Math.max(0, (containerFrame.top + Y_SENSOR - clientY) / Y_SENSOR);\n    let velocityBottom = Math.max(0, (clientY - (containerFrame.bottom - Y_SENSOR)) / Y_SENSOR);\n\n    const topSensor = velocityTop > 0 && velocityBottom === 0;\n    const bottomSensor = velocityBottom > 0 && velocityTop === 0;\n\n    sign.y = topSensor ? -1 : bottomSensor ? 1 : 0;\n    vel.y = sign.y === -1 ? velocityTop : velocityBottom;\n\n    if (vel.y > 0) {\n      if (!intervalId) {\n        // Start scrolling\n        // TODO Use requestAnimationFrame\n        intervalId = setInterval(() => {\n          scrollElement.scrollTop += 2 * (vel.y + Math.sign(vel.y)) * sign.y;\n          update();\n        }, 10);\n      }\n    } else if (intervalId) {\n      stopAutoscroll();\n    } else {\n      update();\n    }\n  };\n\n  const pointerup = (e) => {\n    stopAutoscroll();\n\n    window.removeEventListener(\"pointerdown\", pointerdown);\n    window.removeEventListener(\"pointermove\", pointermove);\n    window.removeEventListener(\"pointerup\", pointerup);\n    repaint(inActivate, true);\n  };\n\n  // Resize\n\n  let resizeInitPos = { x: 0, y: 0 };\n  let initSize = { width: 0, height: 0 };\n\n  const resizePointerDown = (e) => {\n    e.stopPropagation();\n    const { pageX, pageY } = e;\n\n    resizeInitPos = { x: pageX, y: pageY };\n    initSize = { width, height };\n\n    cordDiff = { x: 0, y: 0 };\n    rect = e.target.closest(\".svlt-grid-item\").getBoundingClientRect();\n    newSize = { width, height };\n\n    active = true;\n    trans = false;\n    shadow = { x: item.x, y: item.y, w: item.w, h: item.h };\n\n    containerFrame = getContainerFrame(container);\n    scrollElement = getScroller(container);\n\n    window.addEventListener(\"pointermove\", resizePointerMove);\n    window.addEventListener(\"pointerup\", resizePointerUp);\n  };\n\n  const resizePointerMove = ({ pageX, pageY }) => {\n    newSize.width = initSize.width + pageX - resizeInitPos.x;\n    newSize.height = initSize.height + pageY - resizeInitPos.y;\n\n    // Get max col number\n    let maxWidth = cols - shadow.x;\n    maxWidth = Math.min(max.w, maxWidth) || maxWidth;\n\n    // Limit bound\n    newSize.width = Math.max(Math.min(newSize.width, maxWidth * xPerPx - gapX * 2), min.w * xPerPx - gapX * 2);\n\n    newSize.height = Math.max(newSize.height, min.h * yPerPx - gapY * 2);\n\n    if (max.h) {\n      newSize.height = Math.min(newSize.height, max.h * yPerPx - gapY * 2);\n    }\n    // Limit col & row\n    shadow.w = Math.round((newSize.width + gapX * 2) / xPerPx);\n    shadow.h = Math.round((newSize.height + gapY * 2) / yPerPx);\n\n    repaint();\n  };\n\n  const resizePointerUp = (e) => {\n    e.stopPropagation();\n\n    repaint(inActivate, true);\n\n    window.removeEventListener(\"pointermove\", resizePointerMove);\n    window.removeEventListener(\"pointerup\", resizePointerUp);\n  };\n</script>\n",
    "<style>\n  .svlt-grid-container {\n    position: relative;\n    width: 100%;\n  }\n</style>\n\n<div class=\"svlt-grid-container\" style=\"height: {containerHeight}px\" bind:this={container}>\n  {#if xPerPx || !fastStart}\n    {#each items as item, i (item.id)}\n      <MoveResize\n        on:repaint={handleRepaint}\n        on:pointerup={pointerup}\n        id={item.id}\n        resizable={item[getComputedCols] && item[getComputedCols].resizable}\n        draggable={item[getComputedCols] && item[getComputedCols].draggable}\n        {xPerPx}\n        {yPerPx}\n        width={Math.min(getComputedCols, item[getComputedCols] && item[getComputedCols].w) * xPerPx - gapX * 2}\n        height={(item[getComputedCols] && item[getComputedCols].h) * yPerPx - gapY * 2}\n        top={(item[getComputedCols] && item[getComputedCols].y) * yPerPx + gapY}\n        left={(item[getComputedCols] && item[getComputedCols].x) * xPerPx + gapX}\n        item={item[getComputedCols]}\n        min={item[getComputedCols] && item[getComputedCols].min}\n        max={item[getComputedCols] && item[getComputedCols].max}\n        cols={getComputedCols}\n        {gapX}\n        {gapY}\n        {sensor}\n        container={scroller}\n        nativeContainer={container}\n        let:resizePointerDown\n        let:movePointerDown>\n        {#if item[getComputedCols]}\n          <slot {movePointerDown} {resizePointerDown} dataItem={item} item={item[getComputedCols]} index={i} />\n        {/if}\n      </MoveResize>\n    {/each}\n  {/if}\n</div>\n\n<script>\n  import { getContainerHeight } from \"./utils/container.js\";\n  import { moveItemsAroundItem, moveItem, getItemById, specifyUndefinedColumns, findFreeSpaceForItem } from \"./utils/item.js\";\n  import { onMount, createEventDispatcher } from \"svelte\";\n  import { getColumn, getRowsCount, throttle } from \"./utils/other.js\";\n  import { makeMatrixFromItems } from \"./utils/matrix.js\";\n  import MoveResize from \"./MoveResize/index.svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  export let fillSpace = false;\n  export let items;\n  export let rowHeight;\n  export let cols;\n  export let gap = [10, 10];\n  export let fastStart = false;\n  export let throttleUpdate = 100;\n  export let throttleResize = 100;\n\n  export let scroller = undefined;\n  export let sensor = 20;\n\n  let getComputedCols;\n\n  let container;\n\n  $: [gapX, gapY] = gap;\n\n  let xPerPx = 0;\n  let yPerPx = rowHeight;\n\n  let documentWidth;\n\n  let containerWidth;\n\n  $: containerHeight = getContainerHeight(items, yPerPx, getComputedCols);\n\n  const pointerup = (ev) => {\n    dispatch(\"pointerup\", {\n      id: ev.detail.id,\n      cols: getComputedCols,\n    });\n  };\n\n  const onResize = throttle(() => {\n    items = specifyUndefinedColumns(items, getComputedCols, cols);\n    dispatch(\"resize\", {\n      cols: getComputedCols,\n      xPerPx,\n      yPerPx,\n      width: containerWidth,\n    });\n  }, throttleUpdate);\n\n  onMount(() => {\n    const sizeObserver = new ResizeObserver((entries) => {\n      requestAnimationFrame(() => {\n        let width = entries[0].contentRect.width;\n\n        if (width === containerWidth) return;\n\n        getComputedCols = getColumn(width, cols);\n\n        xPerPx = width / getComputedCols;\n\n        if (!containerWidth) {\n          items = specifyUndefinedColumns(items, getComputedCols, cols);\n\n          dispatch(\"mount\", {\n            cols: getComputedCols,\n            xPerPx,\n            yPerPx, // same as rowHeight\n          });\n        } else {\n          onResize();\n        }\n\n        containerWidth = width;\n      })\n    });\n\n    sizeObserver.observe(container);\n\n    return () => sizeObserver.disconnect();\n  });\n\n  const updateMatrix = ({ detail }) => {\n    let activeItem = getItemById(detail.id, items);\n\n    if (activeItem) {\n      activeItem = {\n        ...activeItem,\n        [getComputedCols]: {\n          ...activeItem[getComputedCols],\n          ...detail.shadow,\n        },\n      };\n\n      if (fillSpace) {\n        items = moveItemsAroundItem(activeItem, items, getComputedCols, getItemById(detail.id, items));\n      } else {\n        items = moveItem(activeItem, items, getComputedCols, getItemById(detail.id, items));\n      }\n\n      if (detail.onUpdate) detail.onUpdate();\n\n      dispatch(\"change\", {\n        unsafeItem: activeItem,\n        id: activeItem.id,\n        cols: getComputedCols,\n      });\n    }\n  };\n\n  const throttleMatrix = throttle(updateMatrix, throttleResize);\n\n  const handleRepaint = ({ detail }) => {\n    if (!detail.isPointerUp) {\n      throttleMatrix({ detail });\n    } else {\n      updateMatrix({ detail });\n    }\n  };\n</script>\n",
    "{#if show}\r\n<div class=\"sidebar\" transition:fly={{x: 250, opacity: 1}}>\r\n  <header>\r\n    <h2>\r\n      <Fa icon={faCogs} size=\"sm\" />\r\n      Actions\r\n    </h2>\r\n  </header>\r\n  <div class=\"container\">\r\n    <button on:click={add}>\r\n      <Fa icon={faStickyNote} size=\"sm\"/>\r\n      <span>Ajouter note</span>\r\n    </button>\r\n    <button>\r\n      <Fa icon={faPhotoVideo} size=\"sm\"/>\r\n      <span>Ajouter media</span>\r\n    </button>\r\n    <button>\r\n      <Fa icon={faUserPlus} size=\"sm\"/>\r\n      <span>Ajouter contributeur</span>\r\n    </button>\r\n  </div>\r\n</div>\r\n{/if}\r\n\r\n\r\n\r\n<script>\r\nimport { fly } from 'svelte/transition';\r\nimport Fa from 'svelte-fa';\r\nimport { faCogs, faStickyNote, faPhotoVideo, faUserPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { createEventDispatcher } from 'svelte';\r\n\r\nconst dispatch = createEventDispatcher();\r\n\r\nfunction add() {\r\n        dispatch('message', {\r\n            text: 'Hello!'\r\n        });\r\n}\r\n\r\nexport let show = false;\r\n</script>\r\n\t\t\r\n<style>\r\n    .sidebar {\r\n      top: 0;\r\n      right: 0;\r\n      height: 100%;\r\n      width: 30%;\r\n      display: flex;\r\n      flex-direction: column;\r\n      margin-top: 15px;\r\n      border-left: 1px solid #aaa;\r\n  }\r\n\r\n   /* HEADER */\r\n\r\n    header {\r\n        height: 4em;\r\n        display: block;\r\n        position: relative;\r\n        background-color: white;\r\n        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16),\r\n        0 2px 10px 0 rgba(0, 0, 0, 0.12);\r\n        text-align: center;\r\n        flex: 0 0 4em;\r\n        transition: color .5s, background-color .5s;\r\n  }\r\n\r\n  .container {\r\n    flex: 1;\r\n    overflow: hidden;\r\n    display: inline-block;\r\n    transition: background-color 0.5s;\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .container button {\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n  .container button span {\r\n    margin-left: 10px;\r\n  }\r\n</style>",
    "<style>\r\n    :global(body), :global(html), :global(#root) {\r\n        height: 100%;\r\n        width: 100%;\r\n        display: block;\r\n        margin: 0;\r\n        padding: 0;\r\n        color: #333333;\r\n        font-family: \"Montserrat\", sans-serif;\r\n  }\r\n\r\n    #app-container {\r\n        height: 100%;\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n  }\r\n\r\n  .container {\r\n    flex: 1;\r\n    overflow: hidden;\r\n    display: flex;\r\n    transition: background-color 0.5s;\r\n  }\r\n\r\n   /* HEADER */\r\n\r\n    header {\r\n        height: 4em;\r\n        display: block;\r\n        position: relative;\r\n        background-color: white;\r\n        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16),\r\n        0 2px 10px 0 rgba(0, 0, 0, 0.12);\r\n        text-align: center;\r\n        flex: 0 0 4em;\r\n        transition: color .5s, background-color .5s;\r\n  }\r\n\r\n    header > span i:not(:first-child) {\r\n        margin-left: 1em;\r\n        display: inline-block;\r\n  }\r\n\r\n    header > span i:not(:first-child):after {\r\n        content: '·';\r\n        position: relative;\r\n        left: -1.8em;\r\n  }\r\n    .widget {\r\n      background: #a30078;\r\n      height: 100%;\r\n      width: 100%;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n\r\n    .remove { \r\n        cursor: pointer;\r\n        position: absolute;\r\n        right: 5px; \r\n        top: 3px;\r\n        user-select: none;\r\n    }\r\n\r\n    nav {\r\n        height: 4em;\r\n        display: flex;\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        transition: height .5s;\r\n    }\r\n\r\n    nav div {\r\n        height: 4em;\r\n        width: 4em;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        cursor: pointer;\r\n        position: relative;\r\n        cursor: pointer;\r\n    }\r\n\r\n    nav span {\r\n        position: absolute;\r\n        top: 4.2em;\r\n        opacity: 0;\r\n        visibility: hidden;\r\n        background-color: #333333;\r\n        color: white;\r\n        transition: opacity .5s, visibility .5s;\r\n        padding: 3px;\r\n        border-radius: 2px;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    nav div:last-child span {\r\n        right: .2em;\r\n    }\r\n\r\n    nav i:hover + span {\r\n        opacity: 1;\r\n        visibility: visible;\r\n    }\r\n</style>\r\n    \r\n<main>\r\n    <div id=\"app-container\">\r\n        <header>\r\n            <h1>\r\n                <Fa icon={faClone} size=\"sm\" />\r\n        Padlet Time\r\n            </h1>\r\n            <nav>\r\n                <div on:click={() => sidebar_show = !sidebar_show}>\r\n                    <Fa icon={faPlus} size=\"sm\"/>\r\n                    <span>Actions</span>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n        <div class=container>\r\n            <Grid bind:items={items} gap={[gapX, gapY]} rowHeight={100} let:item let:dataItem {cols} fillSpace=true>\r\n                <div class=widget >\r\n                    <span on:pointerdown={e => e.stopPropagation()}\r\n                        on:click={() => remove(dataItem)}\r\n                        class=remove\r\n                        >\r\n                        ✕\r\n                    </span>\r\n                    {#if  dataItem.video}\r\n                      <p>video</p>\r\n                    {:else if dataItem.photo}\r\n                      <p>photo</p>\r\n                    {:else}\r\n                      <p>{dataItem.text}</p>\r\n                    {/if}\r\n                </div>\r\n            </Grid>\r\n            <Sidebar bind:show={sidebar_show} on:message={add} />\r\n        </div>\r\n    </div>\r\n</main>\r\n    \r\n<script>\r\n    import Grid from \"svelte-grid\";\r\n    import gridHelp from \"svelte-grid/build/helper/index.mjs\";\r\n    import Fa from 'svelte-fa';\r\n    import { faClone, faPlus } from '@fortawesome/free-solid-svg-icons';\r\n    import Sidebar from '../components/Sidebar.svelte';\r\n\r\n    const COLS = 6;\r\n\r\n    function add() {\r\n      let newItem = {\r\n      6: gridHelp.item({\r\n        w: 2,\r\n        h: 2,\r\n        x: 0,\r\n        y: 0,\r\n      }),\r\n      id: id(),\r\n      video: false,\r\n      photo: false,\r\n      text: \"Dorine\"\r\n\r\n  };\r\n\r\n  let findOutPosition = gridHelp.findSpace(newItem, items, COLS);\r\n\r\n  newItem = {\r\n    ...newItem,\r\n    [COLS]: {\r\n      ...newItem[COLS],\r\n      ...findOutPosition,\r\n    },\r\n  };\r\n\r\n  items = [...items, ...[newItem]];\r\n}\r\n\r\n    \r\n    let sidebar_show = false;\r\n    const id = () => \"_\" + Math.random().toString(36).substr(2, 9);\r\n    \r\n    let gapX = 20;\r\n    let gapY = 20;\r\n    \r\n    let items = [];\r\n    \r\n    const cols = [\r\n      [ 1100, 6 ],\r\n    ];\r\n\r\n\r\nconst remove = (item) => {\r\n    items = items.filter((value) => value.id !== item.id);\r\n};\r\n\r\n</script>",
    "<script>\n    import Particles from \"svelte-particles\";\n    import {particlesConfig} from \"../effects/particles.svelte\";\n</script>\n\n<style>\n    * {\n        box-sizing: border-box;\n    }\n\n    body {\n        font-family: sans-serif;\n        height: 100vh;\n        margin: 0;\n        padding: 0;\n    }\n\n    header {\n        display: none;\n    }\n\n    .box {\n        background-color: rgba(0, 0, 0, 0.98);\n        border-radius: 10px;\n        box-shadow: 0 15px 25px rgba(0, 0, 0, 0.98);\n        margin: auto auto;\n        padding: 40px;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n    }\n\n    .box h2 {\n        margin: 0 0 30px 0;\n        padding: 0;\n        color: #fff;\n        text-align: center;\n    }\n\n    .box .inputBox label {\n        color: #fff;\n    }\n\n    .box .inputBox input {\n        background: transparent;\n        border: none;\n        border-bottom: 1px solid #fff;\n        color: #fff;\n        font-size: 18px;\n        letter-spacing: 2px;\n        margin-bottom: 30px;\n        outline: none;\n        padding: 10px 0;\n        width: 100%;\n    }\n\n    .box input[type=\"submit\"], .box button[type=\"submit\"], a.button {\n        font-family: sans-serif;\n        background: #03a9f4;\n        font-size: 11px;\n        border: none;\n        border-radius: 5px;\n        color: #fff;\n        cursor: pointer;\n        font-weight: 600;\n        padding: 10px 20px;\n        letter-spacing: 2px;\n        outline: none;\n        text-transform: uppercase;\n        text-decoration: none;\n        margin: 2px 10px 2px 0;\n        display: inline-block;\n    }\n\n    .box input[type=\"submit\"]:hover, .box button[type=\"submit\"]:hover, a.button:hover {\n        opacity: 0.8;\n    }\n</style>\n\n<Particles id=\"tsparticles\" options=\"{particlesConfig}\"/>\n<main class=\"box\">\n    <h2>Login</h2>\n    <form>\n        <div class=\"inputBox\">\n            <label for=\"userName\">Username</label>\n            <input type=\"text\" name=\"userName\" id=\"userName\" placeholder=\"type your username\" required/>\n        </div>\n        <div class=\"inputBox\">\n            <label for=\"userPassword\">Password</label>\n            <input type=\"password\" name=\"userPassword\" id=\"userPassword\" placeholder=\"type your password\"\n                   required/>\n        </div>\n        <div>\n            <button type=\"submit\" name=\"\" style=\"float: left;\">Submit</button>\n            <a class=\"button\" href=\"/register\" style=\"float: left;\">Register</a>\n        </div>\n    </form>\n</main>\n<footer>\n</footer>\n",
    "<script>\n    import Particles from \"svelte-particles\";\n    import {particlesConfig} from \"../effects/particles.svelte\";\n</script>\n\n<style>\n    * {\n        box-sizing: border-box;\n    }\n\n    body {\n        font-family: sans-serif;\n        height: 100vh;\n        margin: 0;\n        padding: 0;\n    }\n\n    header {\n        display: none;\n    }\n\n    .box {\n        background-color: rgba(0, 0, 0, 0.8);\n        border-radius: 10px;\n        box-shadow: 0 15px 25px rgba(0, 0, 0, 0.8);\n        margin: auto auto;\n        padding: 40px;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n    }\n\n    .box h2 {\n        margin: 0 0 30px 0;\n        padding: 0;\n        color: #fff;\n        text-align: center;\n    }\n\n    .box .inputBox label {\n        color: #fff;\n    }\n\n    .box .inputBox input {\n        background: transparent;\n        border: none;\n        border-bottom: 1px solid #fff;\n        color: #fff;\n        font-size: 18px;\n        letter-spacing: 2px;\n        margin-bottom: 30px;\n        outline: none;\n        padding: 10px 0;\n        width: 100%;\n    }\n\n    .box input[type=\"submit\"], .box button[type=\"submit\"], a.button {\n        font-family: sans-serif;\n        background: #03a9f4;\n        font-size: 11px;\n        border: none;\n        border-radius: 5px;\n        color: #fff;\n        cursor: pointer;\n        font-weight: 600;\n        padding: 10px 20px;\n        letter-spacing: 2px;\n        outline: none;\n        text-transform: uppercase;\n        text-decoration: none;\n        margin: 2px 10px 2px 0;\n        display: inline-block;\n    }\n\n    .box input[type=\"submit\"]:hover, .box button[type=\"submit\"]:hover, a.button:hover {\n        opacity: 0.8;\n    }\n</style>\n\n<Particles id=\"tsparticles\" options=\"{particlesConfig}\"/>\n<main class=\"box\">\n    <h2>Register</h2>\n    <form>\n        <div class=\"inputBox\">\n            <label for=\"userName\">Username</label>\n            <input type=\"text\" name=\"userName\" id=\"userName\" placeholder=\"type your username\" required/>\n        </div>\n        <div class=\"inputBox\">\n            <label for=\"userPassword\">Password</label>\n            <input type=\"password\" name=\"userPassword\" id=\"userPassword\" placeholder=\"type your password\"\n                   required/>\n        </div>\n        <div class=\"inputBox\">\n            <label for=\"userConfirmPassword\">Confirm Password</label>\n            <input type=\"password\" name=\"userPassword\" id=\"userConfirmPassword\" placeholder=\"confirm your password\"\n                   required/>\n        </div>\n        <button type=\"submit\" name=\"\" style=\"float: left;\">Submit</button>\n        <a class=\"button\" href=\"/\" style=\"float: left;\">Login</a>\n    </form>\n</main>\n<footer>\n</footer>\n"
  ],
  "names": [],
  "mappings": "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"
}